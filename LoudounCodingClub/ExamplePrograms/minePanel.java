import java.io.*;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.awt.image.*;public class minePanel extends JPanel{   //private int direction;   private int score = 0;   private int xPos = 14;   private int yPos = 0;   private int size = 300;   private int[][] board;   private BufferedImage myImage;   private Graphics myBuffer;      public minePanel()   {              addKeyListener(new Key());      board = new int[size/10][size/10];      setFocusable(true);            for(int x = 0; x< board.length; x++)      {         for(int y = 0; y<board.length; y++)         {            board[x][y] = 0;         }      }      for(int z = 0; z<board.length; z++)      {         int rand = (int)(Math.random()*30);         int rand2 = (int)(Math.random()*30);         int rand3 = (int)(Math.random()*30);         if(z < 10)         {            board[rand][z] = 2;            board[rand][z] = 2;            board[rand][z] = 2;         }         else if(z >= 10 && z < 20)         {            board[rand][z] = 3;            board[rand][z] = 3;            board[rand][z] = 3;          }          else if(z >= 20 && z < 30)         {            board[rand][z] = 4;            board[rand][z] = 4;            board[rand][z] = 4;          }      }      paint();   }   public void paint()   {                  myImage =  new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);      myBuffer = myImage.getGraphics();      for(int x = 0; x<board.length; x++)      {         for(int y = 0; y<board[x].length; y++)         {            if(board[x][y] == 0)            {               myBuffer.setColor(new Color(120,75,0));            }            else if(board[x][y] == 1)            {                 myBuffer.setColor(Color.WHITE);            }            else if(board[x][y] == 2)            {                 myBuffer.setColor(Color.BLACK);            }             else if(board[x][y] == 3)            {                 myBuffer.setColor(Color.YELLOW);            }             else if(board[x][y] == 4)            {                 myBuffer.setColor(new Color(190,190,255));            }            myBuffer.fillRect(x *10, y*10, 10, 10);                     }      }      myBuffer.setColor(new Color(30,30,60));         repaint();   }   private class Key extends KeyAdapter   {      public void keyPressed( KeyEvent e)      {         if(e.getKeyCode() == KeyEvent.VK_DOWN)         {            yPos++;         }         else if(e.getKeyCode() == KeyEvent.VK_UP)         {            yPos--;            System.out.println("up");         }         else if(e.getKeyCode() == KeyEvent.VK_LEFT)         {            xPos--;         }         else if(e.getKeyCode() == KeyEvent.VK_RIGHT)         {            xPos++;         }         if(xPos < 0)            xPos = 0;         if(yPos < 0)            yPos = 0;         if(xPos >= size/10)            xPos = size/10-1;         if(yPos >= size/10)            yPos = size/10-1;         board[xPos][yPos] = 1;         paint();      }   }   public void paintComponent(Graphics g)   {      g.drawImage(myImage, 0, 0, getWidth(), getHeight(), null);   }}